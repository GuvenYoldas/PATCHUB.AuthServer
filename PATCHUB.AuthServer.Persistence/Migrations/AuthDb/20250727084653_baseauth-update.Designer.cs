// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PATCHUB.AuthServer.Persistence.Context;

#nullable disable

namespace PATCHUB.AuthServer.Persistence.Migrations.AuthDb
{
    [DbContext(typeof(AuthDbContext))]
    [Migration("20250727084653_baseauth-update")]
    partial class baseauthupdate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ApiUsageLogEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<string>("Endpoint")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ExtraDataJson")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<int>("IDClientCredential")
                        .HasColumnType("int");

                    b.Property<int?>("IDUser")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<int?>("StatusCode")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.ToTable("API_USAGE_LOG", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientAllowedIpEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<int>("IDRateLimitPolicy")
                        .HasColumnType("int");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.HasIndex("IDRateLimitPolicy");

                    b.ToTable("CLIENT_ALLOWED_IP", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientCredentialEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("IDClient")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("RequestCount")
                        .HasColumnType("int");

                    b.Property<int>("RequestLimit")
                        .HasColumnType("int");

                    b.Property<string>("SecretHash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.HasIndex("IDClient", "SecretHash")
                        .IsUnique();

                    b.ToTable("CLIENT_CREDENTIAL", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientRateLimitPolicyEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<int>("IDClientCredential")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdated")
                        .HasColumnType("datetime2");

                    b.Property<int>("MaxRequestsPerDay")
                        .HasColumnType("int");

                    b.Property<int>("MaxRequestsPerHour")
                        .HasColumnType("int");

                    b.Property<int>("MaxRequestsPerMinute")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.HasIndex("IDClientCredential");

                    b.ToTable("CLIENT_RATE_LIMIT_POLICY", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ContactRequestEntity", b =>
                {
                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MessageText")
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("CONTACT_REQUEST", "dbo");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.LoginHistoryEntity", b =>
                {
                    b.Property<int>("IDClientCredential")
                        .HasColumnType("int");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<string>("IP")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("nvarchar(45)");

                    b.Property<DateTime>("LoginDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("UserAgent")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.ToTable("LOGIN_HISTORY", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.PermissionEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.ToTable("PERMISSION", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.RoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<string>("Description")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<int>("IDClientCredential")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.HasIndex("IDClientCredential", "Name")
                        .IsUnique();

                    b.ToTable("ROLE", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.Property<int>("IDRole")
                        .HasColumnType("int");

                    b.Property<int>("IDPermission")
                        .HasColumnType("int");

                    b.HasKey("IDRole", "IDPermission");

                    b.HasIndex("IDPermission");

                    b.ToTable("ROLE_PERMISSION", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.TokenBlacklistEntity", b =>
                {
                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("RevokedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.ToTable("TOKEN_BLACKLIST", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.UserRefreshTokenEntity", b =>
                {
                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("IDClientCredential")
                        .HasColumnType("int");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasIndex("IDClientCredential");

                    b.ToTable("USER_REFRESH_TOKEN", "dbo");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.UserRoleEntity", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ID")
                        .HasColumnOrder(0);

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<DateTime>("CreateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CREATE_DATE")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("CreateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("CREATE_IP");

                    b.Property<int?>("CreateUserId")
                        .HasColumnType("int")
                        .HasColumnName("CREATE_USERID");

                    b.Property<int>("IDRole")
                        .HasColumnType("int");

                    b.Property<int>("IDUser")
                        .HasColumnType("int");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int")
                        .HasColumnName("STATUS_CODE");

                    b.Property<DateTime?>("UpdateDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("UPDATE_DATE");

                    b.Property<string>("UpdateIp")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("UPDATE_IP");

                    b.Property<int?>("UpdateUserId")
                        .HasColumnType("int")
                        .HasColumnName("UPDATE_USERID");

                    b.HasKey("ID");

                    b.HasIndex("IDRole");

                    b.ToTable("USER_ROLE", (string)null);
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientAllowedIpEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.ClientRateLimitPolicyEntity", "Policy")
                        .WithMany("AllowedIps")
                        .HasForeignKey("IDRateLimitPolicy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Policy");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientRateLimitPolicyEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.ClientCredentialEntity", "Client")
                        .WithMany("RateLimitPolicies")
                        .HasForeignKey("IDClientCredential")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.RoleEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.ClientCredentialEntity", "Client")
                        .WithMany()
                        .HasForeignKey("IDClientCredential")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.RolePermissionEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.PermissionEntity", "Permission")
                        .WithMany()
                        .HasForeignKey("IDPermission")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.RoleEntity", "Role")
                        .WithMany()
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.UserRefreshTokenEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.ClientCredentialEntity", "Client")
                        .WithMany()
                        .HasForeignKey("IDClientCredential")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.UserRoleEntity", b =>
                {
                    b.HasOne("PATCHUB.AuthServer.Domain.Entities.RoleEntity", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("IDRole")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientCredentialEntity", b =>
                {
                    b.Navigation("RateLimitPolicies");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.ClientRateLimitPolicyEntity", b =>
                {
                    b.Navigation("AllowedIps");
                });

            modelBuilder.Entity("PATCHUB.AuthServer.Domain.Entities.RoleEntity", b =>
                {
                    b.Navigation("UserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
